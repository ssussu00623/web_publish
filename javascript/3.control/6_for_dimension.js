// 중첩 for문 : 이차원 형태의 저장소 데이터 출력
/*
    1(1,1) 2(1,2) 3(1,3)
    4(2,1) 5(2,2) 6(2,3)
    행, 열 중에 행이 먼저 보이기때문에 중첩에서도 행 먼저 지정한다.
    for () { //여기는 행
        for (){ //여기는 열
        }
    }
*/

for(let i=1 ; i<3 ; i++) { //2행
    let rows='';
    for(let j=1; j<4; j++) { //3열
        rows += `${j}\t`; 
        /*rows = rows + `${j}\t`;로 써도 되지만(틀린게 아니다.)
        간략하게 중첩기호를 사용한다.*/       
    }
    console.log(rows); // 밖에다 하면안댄당.... 이 안에서 이뤄져야함... 
}

//`${j}\t`의 매커니즘... 
// i=1, [1] \t(탭키)[2] \t(탭키)[3] \t(탭키)
// i=2, [1] \t(탭키)[2] \t(탭키)[3] \t(탭키)

console.log( "----------------------------");
// 같은 숫자 반복 말고 증가하는 숫자를 삽입하고 싶을 때. 

for(let k=1 ; k<3 ; k++) { //2행
    let rows='';
    for(let l=1; l<4; l++) { //3열
        let count =1; 
        //열에 삽입된 숫자라고 이 블록으로 들어가면 
        //for문이 반복될 때마다 1값으로 초기화 된다. 
        rows += `${count++}\t`; //값은 1씩 증가하게! 
    }
    console.log(rows);
}

console.log( "----------------------------");

let count =1;//증가하는 기준 숫자는 for문 밖에서 진행해야 함.
for(let k=1 ; k<3 ; k++) { //2행
    let rows='';
    for(let l=1; l<4; l++) { //3열
        rows += `${count += 2}\t`; //숫자가 증가하는 수치는 여기서 지정함 
    }
    console.log(rows); 
}
