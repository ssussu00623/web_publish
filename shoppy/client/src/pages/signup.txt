initFormData에서 관리하던 정보들을 names를 []배열로 가져온다.

    - 정보를 입력하는 것만. 도메인은 빼둔다. 
    계속 initFormData라는 이름으로 생성될 것이기 때문에 const가 아닌 let으로 initFormData를 생성하고
        names.forEach((name)=>{
            initFormData = {...initFormData, [name]:''};
        })
        이렇게 forEach로 돌려보기

        우린 reduce를 활용하기로 한다. 
        const initFormData = names.redfuce((acc, name)
        =>{acc[name] = "";
            return acc;
        });
        
        names가 끝날 때까지 돌리고 리턴한다 
        (값을 바꾸는 중이기 때문에 submit은 하지 못함)

        msgIdRef처럼 Ref가 뒤에 붙든 앞에 붙든 상관 없지만, concat을 사용하여 creactRef를 사용할 때는
        앞이나 뒤에 concat으로 붙여준다. 

        refs===> {idRef: {…}, pwdRef: {…}, cpwdRef: {…}, nameRef: {…}, phoneRef: {…}, …}
        cpwdRef: {current: input#cpwd}
        Object

        이렇게 input차입의 값을 가져왔고

        msgRefs====> {idMsgRef: {…}, pwdMsgRef: {…}, cpwdMsgRef: {…}, nameMsgRef: {…}, phoneMsgRef: {…}, …}
        idMsgRef:{current: null}
        Object

        지금 폼에 입력된 데이터가 없기 때문에 이렇게 출력된다.

        exort에서는 forEach가 가능하지만 
        return에서는 if가 아니라 삼항 연산자를 사용한다
        map 과 필터를 사용

    {name && name.map((name)=>{})}

    이렇게 틀을 만들어두고 무엇이 들어갈지 생각해봐야함(외워야하면서도 )

    {name && name.map((name)=>{
        (name === 'eamilname') ? ():(!이메일 주소(이메일 주소가 !아닐때))
    })}

    무엇을 넣느냐가 아니라 어떤 걸 반복시킬 것인지에 대한 이해가 중요한듯....

